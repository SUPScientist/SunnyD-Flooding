shiny::runApp()
runApp()
# Packages to load
library(dplyr)
library(dbplyr)
library(lubridate)
library(shiny)
library(shinydashboard)
library(colourvalues)
library(waiter)
library(sf)
library(leaflet)
library(DT)
library(htmltools)
library(RColorBrewer)
library(plotly)
library(RPostgres)
library(DBI)
library(pool)
library(shinyalert)
# Source env variables if working on desktop
source("C:/Users/Adam Gold/Desktop/postgres_keys.R")
# City names to show on initial load map
place_names <- c("Beaufort, North Carolina", "Carolina Beach, North Carolina")
# Boundaries of locations listed in "place_names"
urban_boundaries <- sf::st_read("gis_data/merged_boundaries_coast.shp") %>%
sf::st_make_valid() %>%
sf::st_cast("POLYGON") %>%
mutate(place = paste0(Place_Name,", ",State_Name)) %>%
filter(place %in% place_names) %>%
group_by(place) %>%
summarise() %>%
sf::st_as_sf() %>%
st_centroid()
# HTML waiting screen for initial load
waiting_screen <- tagList(
spin_wave(),
h4("Loading...")
)
# Color palette for water level on site map
pal <- colorNumeric(
palette = rev(brewer.pal(10,"RdBu")),
domain = c(-3,3))
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
con
con %>% tbl()
database <- con %>%
tbl("sensor_data")
# # Create database tables
sensor_locations <- read_csv("C:/Users/Adam Gold/Desktop/sensor_locations.csv")
sensor_data <- read_csv("C:/Users/Adam Gold/Desktop/sensor_data.csv")
sensor_data$date <- lubridate::force_tz(sensor_data$date, tzone="America/New_York")
camera_locations <- read_csv("C:/Users/Adam Gold/Desktop/camera_locations.csv")
library(readr)
# # Create database tables
sensor_locations <- read_csv("C:/Users/Adam Gold/Desktop/sensor_locations.csv")
sensor_data <- read_csv("C:/Users/Adam Gold/Desktop/sensor_data.csv")
sensor_data$date <- lubridate::force_tz(sensor_data$date, tzone="America/New_York")
camera_locations <- read_csv("C:/Users/Adam Gold/Desktop/camera_locations.csv")
sensor_data
camera_locations
dbCreateTable(conn = con, name = "camera_locations", fields = camera_locations)
dbAppendTable(conn = con, name = "camera_locations", value = camera_locations)
con %>% tbl("camera_locations")
sensor_locations
dbCreateTable(conn = con, name = "sensor_locations", fields = sensor_locations)
dbAppendTable(conn = con, name = "sensor_locations", value = sensor_locations)
con %>% tbl("sensor_locations")
sensor_data
sensor_data %>% View
e = "sensor_data", fields = sensor_data)
dbAppendTable(conn = con, name = "sensor_data", value = sensor_data)
con %>% tbl("sensor_data")
#
dbCreateTable(conn = con, name = "sensor_data", fields = sensor_data)
dbAppendTable(conn = con, name = "sensor_data", value = sensor_data)
con %>% tbl("sensor_data")
api_keys <- tibble::tibble("api_keys" = c("jjRa6S550zvTxMF"))
api_keys
# # Make a password
# password(n=15,numbers=T, special = c("-",".","_","~"))
#
dbCreateTable(conn = con, name = "api_keys", fields = api_keys)
dbAppendTable(conn = con, name = "api_keys", value = api_keys)
con %>% tbl("api_keys")
DBI::dbRemoveTable(conn = con, name = "api_keys")
api_keys
api_keys <- api_keys %>% transmute(keys = api_keys)
api_keys
# # Make a password
# password(n=15,numbers=T, special = c("-",".","_","~"))
#
dbCreateTable(conn = con, name = "api_keys", fields = api_keys)
dbAppendTable(conn = con, name = "api_keys", value = api_keys)
con %>% tbl("api_keys")
one_token
gr
az
# Packages to load
library(dplyr)
library(dbplyr)
library(lubridate)
library(shiny)
library(shinydashboard)
library(colourvalues)
library(waiter)
library(sf)
library(leaflet)
library(DT)
library(htmltools)
library(RColorBrewer)
library(plotly)
library(RPostgres)
library(DBI)
library(pool)
library(shinyalert)
# Source env variables if working on desktop
# source("C:/Users/Adam Gold/Desktop/postgres_keys.R")
# City names to show on initial load map
place_names <- c("Beaufort, North Carolina", "Carolina Beach, North Carolina")
# Boundaries of locations listed in "place_names"
urban_boundaries <- sf::st_read("gis_data/merged_boundaries_coast.shp") %>%
sf::st_make_valid() %>%
sf::st_cast("POLYGON") %>%
mutate(place = paste0(Place_Name,", ",State_Name)) %>%
filter(place %in% place_names) %>%
group_by(place) %>%
summarise() %>%
sf::st_as_sf() %>%
st_centroid()
# HTML waiting screen for initial load
waiting_screen <- tagList(
spin_wave(),
h4("Loading...")
)
# Color palette for water level on site map
pal <- colorNumeric(
palette = rev(brewer.pal(10,"RdBu")),
domain = c(-3,3))
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
# City names to show on initial load map
place_names <- c("Beaufort, North Carolina", "Carolina Beach, North Carolina")
# Source env variables if working on desktop
source("C:/Users/Adam Gold/Desktop/postgres_keys.R")
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
database <- con %>%
tbl("sensor_data")
database
database_tbl <- database %>% slice(10)
database_tbl <- database %>% head()
databse_tbl
database_tbl
database_tbl <- database %>% head() %>% collect()
database_tbl
database_tbl <- database %>% collect()
database_tbl
dbRemoveTable(conn = con,name = "sensor_data")
database_tbl %>% head()
raw_data_tbl <- database_tbl
raw_data_tbl
raw_data_tbl %>% mutate(pressure = rnorm(mean=1010,sd=3))
raw_data_tbl %>% mutate("pressure" = rnorm(mean=1010,sd=3))
raw_data_tbl %>% mutate(pressure = rnorm(n=nrow(raw_data_tbl),mean=1010,sd=3))
raw_data_tbl %>% mutate(pressure = rnorm(n=nrow(raw_data_tbl),mean=1010,sd=3), .before = "level")
raw_data_tbl %>% mutate(pressure = rnorm(n=nrow(raw_data_tbl),mean=1010,sd=3), .before = "level") %>% dplyr::select(-level)
raw_data_tbl <- raw_data_tbl %>% mutate(pressure = rnorm(n=nrow(raw_data_tbl),mean=1510,sd=3), .before = "level") %>% dplyr::select(-level)
raw_data_tbl
dbCreateTable(conn = con, name = "sensor_data", fields = raw_data_tbl)
dbAppendTable(conn = con, name = "sensor_data", value = raw_data_tbl)
con %>% tbl("sensor_data")
database_tbl
database_tbl %>% mutate(rtk_elevation_used = NA_real_)
database_tbl %>% mutate(rtk_elevation_used = NA_real_, .before="notes")
database_tbl %>% mutate(rtk_elevation_used = NA_real_, .before="notes") %>% mutate(pressure = NA_real_, .before = "voltage")
database_tbl %>% mutate(rtk_elevation_used = NA_real_, .before="notes") %>% mutate(pressure = NA_real_, .before = "voltage") %>% mutate(water_level = NA_real_, .before = "level")
database_tbl %>% mutate(sensor_elevation = NA_real_, .before="notes") %>% mutate(sensor_pressure = NA_real_, .before = "voltage") %>% mutate(sensor_water_level = NA_real_, .before = "level") %>% mutate(road_water_level = NA_real_, .before = "level")
database_tbl %>% mutate(sensor_elevation = NA_real_, .before="notes") %>% mutate(sensor_pressure = NA_real_, .before = "voltage") %>% mutate(sensor_water_level = NA_real_, .before = "level") %>% mutate(road_water_level = NA_real_, .before = "level") %>% dplyr::select(-level)
database_tbl %>% mutate(road_water_level = NA_real_, sensor_water_level = NA_real_, road_elevation = NA_real_, sensor_elevation = NA_real_, sensor_pressure = NA_real_, .before = "level") %>% dplyr::select(-level)
database_tbl %>% mutate(road_water_level = NA_real_, sensor_water_level = NA_real_, road_elevation = NA_real_, sensor_elevation = NA_real_, sensor_pressure = NA_real_, .before = "level") %>% dplyr::select(-level)
database_tbl %>% mutate(road_water_level = NA_real_, sensor_water_level = NA_real_, road_elevation = NA_real_, sensor_elevation = NA_real_, sensor_pressure = NA_real_, .before = "level") %>% dplyr::select(-level) %>% slice(10)
database_tbl %>% mutate(road_water_level = NA_real_, sensor_water_level = NA_real_, road_elevation = NA_real_, sensor_elevation = NA_real_, sensor_pressure = NA_real_, .before = "level") %>% dplyr::select(-level) %>% slice(1)
database_tbl %>% mutate(road_water_level = NA_real_, sensor_water_level = NA_real_, road_elevation = NA_real_, sensor_elevation = NA_real_, sensor_pressure = NA_real_, .before = "level") %>% dplyr::select(-level) %>% slice(1:10)
database_tbl %>% mutate(road_water_level = NA_real_, road_elevation = NA_real_, sensor_water_level = NA_real_, sensor_elevation = NA_real_, sensor_pressure = NA_real_, .before = "level") %>% dplyr::select(-level) %>% slice(1:10)
database_tbl %>% mutate(road_water_level = NA_real_, road_elevation = NA_real_, sensor_water_level = NA_real_, sensor_elevation = NA_real_, atm_pressure = NA_real_,sensor_pressure = NA_real_, .before = "level") %>% dplyr::select(-level) %>% slice(1:10)
database_tbl <- database_tbl %>% mutate(road_water_level = NA_real_, road_elevation = NA_real_, sensor_water_level = NA_real_, sensor_elevation = NA_real_, atm_pressure = NA_real_,sensor_pressure = NA_real_, .before = "level") %>% dplyr::select(-level) %>% slice(1:10)
database_tbl
dbCreateTable(conn = con, name = "sensor_data_processed", fields = database_tbl)
dbAppendTable(conn = con, name = "sensor_data_processed", value = database_tbl)
con %>% tbl("sensor_data")
con %>% tbl("sensor_data_processed")
con
con %>% DBI::dbListTables()
con %>% tbl("sensor_data_processed")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
