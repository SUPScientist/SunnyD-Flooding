database
sensor_locations %>% slice(rep(1:n(), each=10)) %>%
mutate(level = rnorm(mean=0, sd=2))
rnorm(mean=0, sd=2)
database <- sensor_locations %>% slice(rep(1:n(), each=10)) %>%
mutate(level = rnorm(n=10,mean=0, sd=2))
database
database <- sensor_locations %>% slice(rep(1:n(), each=10)) %>%
mutate(level = rnorm(n=10,mean=0, sd=1))
database
database <- sensor_locations %>% slice(rep(1:n(), each=10)) %>%
mutate(level = rnorm(n=10,mean=0, sd=1))
pal <- colorNumeric(
palette = "Blues",
domain = database$level)
pal
pal <- colorNumeric(
palette = "Blues",
domain = c(-3,3))
database <- sensor_locations %>% slice(rep(1:n(), each=10)) %>%
mutate(level = rnorm(n=10,mean=0, sd=1))
filtered_sensor_sites
runApp()
database
sensor_locations
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=10)) %>%
mutate(level = rnorm(n=10,mean=0, sd=1))
database
runApp()
?addLegend
pal
filtered_sensor_sites
runApp()
runApp()
?addCircleMarkers
runApp()
library(htmltools)
runApp()
runApp()
runApp()
palette = "RdBu",
domain = c(-3,3)) %>%
rev()
pal <- colorNumeric(
palette = "RdBu",
domain = c(-3,3)) %>%
rev()
pal <- rev(colorNumeric(
palette = "RdBu",
domain = c(-3,3)))
pal <- colorNumeric(
palette = rev(brewer.pal("RdBu")),
domain = c(-3,3))
library(RColorBrewer)
pal <- colorNumeric(
palette = rev(brewer.pal("RdBu")),
domain = c(-3,3))
brewer.pal("RdBu")
?brewer.pal
pal <- colorNumeric(
palette = rev(brewer.pal(10,"RdBu")),
domain = c(-3,3))
pal
runApp()
?addCircleMarkers
runApp()
?leaflet::setView()
runApp()
c(lng = -77.360784, lat = 34.576053)
runApp()
runApp()
actionLink
?htmlEscape
htmlEscape(paste0("Current level: ",filtered_sensor_sites$level))
runApp()
h3("Site ",filtered_sensor_sites$sensor_ID)
runApp()
div(align = "center",
h3("Site ",filtered_sensor_sites$sensor_ID),
br(),
h4("Current level: ",round(filtered_sensor_sites$level, digits = 2)),
actionButton("view_site","View data")))
runApp()
paste0("view_site",filtered_sensor_sites$sensor_ID)
runApp()
library(shinyjs)
jsCode <- "$(document).on('click', 'button', function(e) {
e.stopPropagation()
if(typeof BUTTON_CLICK_COUNT == "undefined") {
BUTTON_CLICK_COUNT = 1;
} else {
BUTTON_CLICK_COUNT ++;
}
Shiny.onInputChange("js.button_clicked",
e.target.id + "_" + BUTTON_CLICK_COUNT);
});"
text
?text
jsCode <- "$(document).on('click', 'button', function(e) {
e.stopPropagation()
if(typeof BUTTON_CLICK_COUNT == 'undefined') {
BUTTON_CLICK_COUNT = 1;
} else {
BUTTON_CLICK_COUNT ++;
}
Shiny.onInputChange('js.button_clicked',
e.target.id + '_' + BUTTON_CLICK_COUNT);
});"
jsCode
runApp()
runApp()
?tabPanel
runApp()
?updateTabsetPanel
?navbarPage
runApp()
paste0("view_site.",filtered_sensor_sites$sensor_ID)
runApp()
paste0("view_site.",filtered_sensor_sites$sensor_ID)
runApp()
runApp()
Math.random
runApp()
runApp()
ggplot()+
geom_line(aes(x=1,y=filtered_sensor_sites$level),color = "blue")+
geom_point(aes(x=1,y=filtered_sensor_sites$level))+
theme_minimal()+
xlab("Date")+
ylab("Water level (ft)")+
theme(text=element_text(family = "Bahnschrift", size = 20))
ggplot()+
geom_line(aes(x=1,y=filtered_sensor_sites$level),color = "blue")+
geom_point(aes(x=1,y=filtered_sensor_sites$level), color = "blue")+
theme_minimal()+
xlab("Date")+
ylab("Water level (ft)")+
theme(text=element_text(family = "Bahnschrift", size = 20))
runApp()
library(plotly)
plotlyOutput
runApp()
runApp()
Sys.time()
database
library(lubridate)
mdy_hm(120320200000)
mdy_hm(120320200000, tz = "EST")
seq(mdy_hm(120320200000, tz = "EST"),by"1hr")
seq(mdy_hm(120320200000, tz = "EST"),by"1")
seq(mdy_hm(120320200000, tz = "EST"),by ="1")
seq(mdy_hm(120320200000, tz = "EST"),by ="1hr")
seq(mdy_hm(120320200000, tz = "EST"),by ="hours")
seq(from = mdy_hm(120320200000, to =mdy_hm(120320210000, tz = "EST"),by ="hours")
)
seq(from = mdy_hm(120320200000, to =mdy_hm(12032021000, tz = "EST"),by ="hours")
)
seq(from = mdy_hm(120320200000,tz="EST"), to =mdy_hm(12032021000, tz = "EST"),by ="hours")
seq(from = mdy_hm(120320200000,tz="EST"), to =mdy_hm(120320201000, tz = "EST"),by ="hours")
seq(from = mdy_hm(120320200000,tz="EST"), to =mdy_hm(120320200900, tz = "EST"),by ="hours")
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=10)) %>%
mutate(level = rnorm(n=10,mean=0, sd=1)) %>%
mutate(date = seq(from = mdy_hm(120320200000,tz="EST"), to =mdy_hm(120320200900, tz = "EST"),by ="hours"))
database
runApp()
filtered_sensor_sites
filtered_sensor_sites
database
filtered_sensor_sites_data <-
s_data_coords <- filtered_sensor_sites %>% sf::st_coordinates() %>% tibble::as_tibble() %>% dplyr::summarise(lng1 = min(X), lng2 = max(X), lat1 = min(Y), lat2 = max(Y))
runApp()
filtered_sensor_sites
filtered_sensor_sites_data
database
city_name
runApp()
filtered_sensor_sites
runApp()
sensor_sites
sensor_locations
sensor_site
sensor_locations
sensor_data
filtered_sensor_sites_data
sensor_data
sensor_locations
database
runApp()
?selectizeInput
runApp()
runApp()
data_location
runApp()
runApp()
?updateSelectInput()
runApp()
sensor_locations
runApp()
runApp()
runApp()
runApp()
runApp()
filtered_sensor_sites
runApp()
runApp()
runApp()
?sliderInput
database$date %>% max()
database$date %>% max() - 12
database$date %>% max() - hours(12)
24*7
24*5
runApp()
runApp()
c(database$date %>% max(),database$date %>% max()-72)
runApp()
c(database$date %>% max(),c(database$date %>% max()-hours(72))
)
runApp()
runApp()
sensor_data
database
runApp()
z <- "2020-11-08"
z
ymd(z)
lubriday::ymd(z)
lubridate::ymd(z)
max(ymd(z))
runApp()
c("2020-11-08","2020-12-01")
c("2020-11-08","2020-12-01") %>% max()
runApp()
sin(x)
sin
99/24
seq(from = mdy_hm(120320200000,tz="EST"),by ="hours", n = 100)
seq(from = mdy_hm(120320200000,tz="EST"),by ="hours", length.out = 100)
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(x) + rnorm(n=10,mean=0, sd=.1)) %>%
mutate(date = seq(from = mdy_hm(120320200000,tz="EST"),by ="hours", length.out = 100))
sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(date) + rnorm(n=10,mean=0, sd=.1)) %>%
mutate(date = seq(from = mdy_hm(120320200000,tz="EST"),by ="hours", length.out = 100))
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(row_number()) + rnorm(n=10,mean=0, sd=.1)) %>%
mutate(date = seq(from = mdy_hm(120320200000,tz="EST"),by ="hours", length.out = 100))
database
runApp()
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(row_number()) + rnorm(n=10,mean=0, sd=.1)) %>%
mutate(date = seq(to = mdy_hm(120420200000,tz="EST"),by ="hours", length.out = 100))
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(row_number()) + rnorm(n=10,mean=0, sd=.1)) %>%
mutate(date = seq(from = mdy_hm(120120200000,tz="EST"),by ="hours", length.out = 100))
database
database$date %>% min()
database$date %>% max()
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(row_number()) + rnorm(n=10,mean=0, sd=.1)) %>%
mutate(date = seq(from = mdy_hm(113020200000,tz="EST"),by ="hours", length.out = 100))
database$date %>% max()
runApp()
place_names <- c("Beaufort, North Carolina", "Carolina Beach, North Carolina")
sensor_locations <- tibble::tibble("place" = c("Beaufort, North Carolina", "Beaufort, North Carolina"),
"sensor_ID" = "BF_1","BF_2",
"lat" = c(34.715890,34.714741),
"long" = c(-76.663831, -76.661725)
) %>%
sf::st_as_sf(coords = c("long","lat"), crs = 4269)
sensor_locations
sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100))
sensor_locations
sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100))
sensor_locations %>% tibble::as_tibble()
sensor_locations <- tibble::tibble("place" = c("Beaufort, North Carolina", "Beaufort, North Carolina"),
"sensor_ID" = c("BF_1","BF_2"),
"lat" = c(34.715890,34.714741),
"long" = c(-76.663831, -76.661725)
) %>%
sf::st_as_sf(coords = c("long","lat"), crs = 4269)
sensor_locations
sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100))
sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(row_number()) + rnorm(n=10,mean=0, sd=.1))
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(row_number()) + rnorm(n=10,mean=0, sd=.1)) %>%
mutate(date = rep(seq(from = mdy_hm(113020200000,tz="EST"),by ="hours", length.out = 100),2))
database
runApp()
z="Beaufort, North Carolina"
sensor_locations
ensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
arrange(-date) %>%
slice(1))
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
arrange(-date) %>%
slice(1))
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
arrange(date) %>%
slice(1))
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
arrange(date) %>%
slice(1))
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
group_by(sensor_ID) %>% arrange(date) %>%
slice(1))
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
group_by(sensor_ID) %>% arrange(date) %>%
slice(1)) %>% View()
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
group_by(sensor_ID) %>% arrange(-date) %>%
slice(1)) %>% View()
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
group_by(sensor_ID) %>% arrange(-c(date)) %>%
slice(1)) %>% View()
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
group_by(sensor_ID) %>% arrange(rev(date)) %>%
slice(1)) %>% View()
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
group_by(sensor_ID) %>% rev(arrange(date)) %>%
slice(1)) %>% View()
sensor_locations %>%
filter(place == z) %>%
left_join(database %>%
filter(place == z) %>%
group_by(sensor_ID) %>% arrange(desc(date)) %>%
slice(1)) %>% View()
runApp()
place_names <- c("Beaufort, North Carolina", "Carolina Beach, North Carolina")
sensor_locations <- tibble::tibble("place" = c("Beaufort, North Carolina", "Beaufort, North Carolina"),
"sensor_ID" = c("BF_1","BF_2"),
"lat" = c(34.715890,34.714741),
"long" = c(-76.663831, -76.661725)
) %>%
sf::st_as_sf(coords = c("long","lat"), crs = 4269)
urban_boundaries <- sf::st_read("merged_boundaries_coast.shp") %>%
sf::st_make_valid() %>%
sf::st_cast("POLYGON") %>%
mutate(place = paste0(Place_Name,", ",State_Name)) %>%
filter(place %in% place_names) %>%
group_by(place) %>%
summarise() %>%
sf::st_as_sf() %>%
st_centroid()
waiting_screen <- tagList(
spin_ring(),
h4("Cool stuff loading...")
)
pal <- colorNumeric(
palette = rev(brewer.pal(10,"RdBu")),
domain = c(-3,3))
database <- sensor_locations %>% tibble::as_tibble() %>% slice(rep(1:n(), each=100)) %>%
mutate(level = sin(row_number()) + rnorm(n=10,mean=0, sd=.1)) %>%
mutate(date = rep(seq(from = mdy_hm(113020200000,tz="EST"),by ="hours", length.out = 100),2))
sensor_site
sensor_locations %>%
filter(place == "Beaufort, North Carolina") %>%
left_join(database %>%
filter(place == "Beaufort, North Carolina") %>%
group_by(sensor_ID) %>%
arrange(desc(date)) %>%
slice(1))
sensor_site <- sensor_locations %>%
filter(place == "Beaufort, North Carolina") %>%
left_join(database %>%
filter(place == "Beaufort, North Carolina") %>%
group_by(sensor_ID) %>%
arrange(desc(date)) %>%
slice(1))
sensor_data <-
database %>%
filter(place == "Beaufort, North Carolina") %>%
filter(date >= ymd(20201130) & date <= ymd(20201204)) %>%
dplyr::select(-geometry)
sensor_data
sensor_data
filtered_sensor_sites <- sensor_site
filtered_sensor_sites_data <- sensor_data
filtered_sensor_sites %>% sf::st_coordinates() %>% tibble::as_tibble() %>% dplyr::summarise(lng1 = min(X), lng2 = max(X), lat1 = min(Y), lat2 = max(Y))
s_data_coords <- filtered_sensor_sites %>% sf::st_coordinates() %>% tibble::as_tibble() %>% dplyr::summarise(lng1 = min(X), lng2 = max(X), lat1 = min(Y), lat2 = max(Y))
filtered_sensor_sites
runApp()
sensor_data %>%
mutate(html_popups = paste0(
div(align = "center",
h3("Site ",sensor_ID),
h4("Current level: ",round(level, digits = 2)),
actionButton(paste0("view_site"),"View data",onclick="{Shiny.onInputChange('view_site', (Math.random() * 1000) + 1);}"))))
paste0(
div(align = "center"))
h3("Site ",sensor_ID)
h3("Site ")
h4("Current level: ",)
actionButton(paste0("view_site"),"View data",onclick="{Shiny.onInputChange('view_site', (Math.random() * 1000) + 1);}")
sensor_data %>%
mutate(html_popups = paste0(
'<div align=\"center\"></div>',
'<h3>Site ',sensor_ID,'</h3>',
'<h4>Current level: ', round(level, digits = 2),'</h4>',
'<button id="view_site" type="button" class="btn btn-default action-button" onclick="{Shiny.onInputChange(&#39;view_site&#39;, (Math.random() * 1000) + 1);}">View data</button>'))
runApp()
filtered_sensor_sites
sensor_site
sensor_site %>%
mutate(html_popups = paste0(
'<div align=\"center\"></div>',
'<h3>Site ',sensor_ID,'</h3>',
'<h4>Current level: ', round(level, digits = 2),'</h4>',
'<button id="view_site" type="button" class="btn btn-default action-button" onclick="{Shiny.onInputChange(&#39;view_site&#39;, (Math.random() * 1000) + 1);}">View data</button>'))
runApp()
sensor_locations %>%
filter(place == "Beaufort, North Carolina") %>%
left_join(database %>%
filter(place == "Beaufort, North Carolina") %>%
group_by(sensor_ID) %>%
arrange(desc(date)) %>%
slice(1)) %>%
mutate(html_popups = paste0(
'<div align=\"center\"></div>',
'<h3>Site ',sensor_ID,'</h3>',
'<h4>Current level: ', round(level, digits = 2),'</h4>',
'<button id="view_site" type="button" class="btn btn-default action-button" onclick="{Shiny.onInputChange(&#39;view_site&#39;, (Math.random() * 1000) + 1);}">View data</button>'))
sensor_locations %>%
filter(place == "Beaufort, North Carolina") %>%
left_join(database %>%
filter(place == "Beaufort, North Carolina") %>%
group_by(sensor_ID) %>%
arrange(desc(date)) %>%
slice(1)) %>%
mutate(html_popups = paste0(
'<div align=\"center\"></div>',
'<h3>Site ',sensor_ID,'</h3>',
'<h4>Current level: ', round(level, digits = 2),'</h4>',
'<button id="view_site" type="button" class="btn btn-default action-button" onclick="{Shiny.onInputChange(&#39;view_site&#39;, (Math.random() * 1000) + 1);}">View data</button>'))
%>% View
sensor_locations %>%
filter(place == "Beaufort, North Carolina") %>%
left_join(database %>%
filter(place == "Beaufort, North Carolina") %>%
group_by(sensor_ID) %>%
arrange(desc(date)) %>%
slice(1)) %>%
mutate(html_popups = paste0(
'<div align=\"center\"></div>',
'<h3>Site ',sensor_ID,'</h3>',
'<h4>Current level: ', round(level, digits = 2),'</h4>',
'<button id="view_site" type="button" class="btn btn-default action-button" onclick="{Shiny.onInputChange(&#39;view_site&#39;, (Math.random() * 1000) + 1);}">View data</button>'))%>% View
runApp()
runApp()
?observeEvent
runApp()
runApp()
place_names
runApp()
div(align = "center")
p("Site ")
runApp()
sensor_locations
runApp()
?renderDataTable
runApp()
sensor_locations
database
runApp()
shiny::runApp()
shiny::runApp()
library(renv)
library(renv)
install.packages("renv")
install.packages("renv")
library(renv)
library(renv)
library(renv)
install.packages("renv")
install.packages("renv")
# Packages to load
library(renv)
renv::init()
shiny::runApp()
runApp()
runApp()
