h2("In Development",style="color:red")
runApp('C:/GitHub/SunnyD-Flooding/sunnyd-shinyapp')
div(p("In Development",style="color:white"),style="background-color:red")
runApp('C:/GitHub/SunnyD-Flooding/sunnyd-shinyapp')
tippy::tippy()
?tippy::tippy()
h5()
runApp('C:/GitHub/SunnyD-Flooding/sunnyd-shinyapp')
runApp('C:/GitHub/SunnyD-Flooding/sunnyd-shinyapp')
icon("info-circle",style="font-size:12")
icon("info-circle",style="font-size:10")
icon("info-circle",style="size:10")
icon("info-circle",style="width:10")
icon("info-circle",style="font-size:10px")
runApp('C:/GitHub/SunnyD-Flooding/sunnyd-shinyapp')
icon("info-circle",style="font-size:16px")
runApp('C:/GitHub/SunnyD-Flooding/sunnyd-shinyapp')
tf_outfile
Sys.getenv("POSTGRESQL_DATABASE")
# Source env variables if working on desktop
source("C:/Users/Adam Gold/Desktop/postgres_keys.R")
Sys.getenv("POSTGRESQL_DATABASE")
Sys.getenv("POSTGRESQL_HOST")
Sys.getenv("POSTGRESQL_PORT")
Sys.getenv("POSTGRESQL_PASSWORD")
Sys.getenv("POSTGRESQL_USER"
)
realtime_img <- magick::image_read(paste0("https://photos-sunnydayflood.cloudapps.unc.edu/public/",input$camera_ID,".jpg"))
realtime_img <- magick::image_read(paste0("https://photos-sunnydayflood.cloudapps.unc.edu/public/","CAM_BF_01",".jpg"))
realtime_img
tf_outfile <- tempfile(fileext='.jpg')
realtime_img %>%
image_scale(geometry = geometry_size_pixels(width=224,height=224,preserve_aspect = F)) %>%
magick::image_write(path = tf_outfile)
library(dplyr)
realtime_img %>%
image_scale(geometry = geometry_size_pixels(width=224,height=224,preserve_aspect = F)) %>%
magick::image_write(path = tf_outfile)
library(magick)
realtime_img %>%
image_scale(geometry = geometry_size_pixels(width=224,height=224,preserve_aspect = F)) %>%
magick::image_write(path = tf_outfile)
tf_outfile
base64enc::base64encode(tf_outfile)
realtime_img %>%
image_scale(geometry = geometry_size_pixels(width=224,height=224,preserve_aspect = F)) %>%
magick::image_write(path = "C:/Users/Adam Gold/Downloads/test_picture_enc.jpg")
remove.packages("reticulate", lib="~/R/win-library/4.0")
shiny::runApp()
runApp()
runApp()
# Packages to load
library(dplyr)
library(dbplyr)
library(lubridate)
library(shiny)
library(shinydashboard)
library(colourvalues)
library(waiter)
library(sf)
library(leaflet)
library(DT)
library(htmltools)
library(RColorBrewer)
library(highcharter)
library(magick)
library(xts)
library(RPostgres)
library(DBI)
library(pool)
library(shinyalert)
library(stringr)
library(shinydisconnect)
library(tippy)
library(httr)
# Source env variables if working on desktop
source("C:/Users/Adam Gold/Desktop/postgres_keys.R")
# City names to sho<- on initial load map
place_names <- c("Beaufort, North Carolina") #, "Carolina Beach, North Carolina"
# Boundaries of locations listed in "place_names"
suppressMessages(
urban_boundaries <- sf::st_read("gis_data/merged_boundaries_coast.shp") %>%
sf::st_make_valid() %>%
sf::st_cast("POLYGON") %>%
mutate(place = paste0(Place_Name,", ",State_Name)) %>%
filter(place %in% place_names) %>%
group_by(place) %>%
summarise() %>%
sf::st_as_sf() %>%
st_centroid()
)
# HTML waiting screen for initial load
waiting_screen <- tagList(
spin_wave(),
h4("Loading...")
)
# Color palette for water level on site map
pal <- colorNumeric(
palette = rev(brewer.pal(10,"RdYlBu")),
domain = c(-2,0))
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
onStop(function() {
poolClose(con)
})
database <- con %>%
tbl("sensor_data_processed")
global <- getOption("highcharter.global")
global$useUTC <- FALSE
global$timezoneOffset <- -300
options(highcharter.global = global)
# Beaufort NOAA wl functions
beaufort_wl <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"range" = "336",
"product" = "water_level",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(latest_noaa_wl)[1:2] <- c("date", "level_ft_navd88")
latest_noaa_wl <- latest_noaa_wl %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(level_ft_navd88),
entity = "NOAA Observed",
notes = "observation"
)
return(latest_noaa_wl)
}
beaufort_wl_predictions <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"end_date" = format(Sys.Date() + 3,"%Y%m%d"),
"range" = "408",
"product" = "predictions",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl_predictions <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$predictions)
colnames(latest_noaa_wl_predictions)[1:2] <- c("date", "predictions_ft_navd88")
latest_noaa_wl_predictions <- latest_noaa_wl_predictions %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(predictions_ft_navd88),
entity = "NOAA Predicted",
notes = "prediction"
)
return(latest_noaa_wl_predictions)
}
latest_noaa_wl
# Beaufort NOAA wl functions
beaufort_wl <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"range" = "336",
"product" = "water_level",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(latest_noaa_wl)[1:2] <- c("date", "level_ft_navd88")
latest_noaa_wl <- latest_noaa_wl %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(level_ft_navd88),
entity = "NOAA Observed",
notes = "observation"
)
return(latest_noaa_wl)
}
beaufort_wl()
beaufort_wl_predictions <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"end_date" = format(Sys.Date() + 3,"%Y%m%d"),
"range" = "408",
"product" = "predictions",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl_predictions <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$predictions)
colnames(latest_noaa_wl_predictions)[1:2] <- c("date", "predictions_ft_navd88")
latest_noaa_wl_predictions <- latest_noaa_wl_predictions %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(predictions_ft_navd88),
entity = "NOAA Predicted",
notes = "prediction"
)
return(latest_noaa_wl_predictions)
}
beaufort_wl_predictions()
# Load Data
# Update sensor locations with most recent data from database
sensor_locations <- con %>%
tbl("sensor_locations") %>%
collect() %>%
left_join(database %>%
group_by(sensor_ID) %>%
filter(qa_qc_flag == F) %>%
filter(date == max(date, na.rm=T)) %>%
collect(),
by=c("place","sensor_ID", "sensor_elevation","road_elevation")) %>%
mutate(date_lst = lubridate::with_tz(date, tzone = "America/New_York")) %>%
sf::st_as_sf(coords = c("lng", "lat"), crs = 4269) %>%
mutate(
html_popups = paste0(
'<div>',
'<h3 align="center"><strong>Site ',sensor_ID,'</h3></strong>',
'<h4 align="center">Last level:</h4>',
'<h3 align="center">',round(road_water_level, digits = 2),'</h3>',
'<p align="center">',paste0(format(date_lst, "%I:%M %p", usetz = T)," - ",format(date_lst, "%b %d, %Y")),'</p>',
'<p align="center">Click to view data at this site</p>'
)
) %>%
mutate(flood_status = road_water_level > (road_elevation - alert_threshold))
sensor_locations
camera_locations <- con %>%
tbl("camera_locations") %>%
collect() %>%
left_join(con %>%
tbl("photo_info") %>%
filter(DateTimeOriginalUTC == max(DateTimeOriginalUTC, na.rm=T)) %>%
collect(), by = c("camera_ID")) %>%
mutate(date_lst = lubridate::with_tz(DateTimeOriginalUTC , tzone = "America/New_York")) %>%
sf::st_as_sf(coords = c("lng", "lat"), crs = 4269) %>%
mutate(
html_popups = paste0(
'<div>',
'<h3 align="center"><strong>Camera ',camera_ID,'</h3></strong>',
'<h4 align="center">Last picture:</h4>',
'<h4 align="center">',paste0(format(date_lst, "%I:%M %p", usetz = T)," - ",format(date_lst, "%b %d, %Y")),'</h4>',
'<p align="center">Click to view this camera</p>'
)
)
# Load NOAA Beaufort water level data
third_party_raw_data <- beaufort_wl() %>%
rbind(beaufort_wl_predictions())
third_party_raw_data
third_party_raw_data$date
plot_3rd_party_data <- third_party_data()
third_party_raw_data
runApp()
plot_3rd_party_data_obs
third_party_raw_data
third_party_raw_data
third_party_raw_data$date
third_party_raw_data$date %>% is.date()
third_party_raw_data$date %>% is.Date()
third_party_raw_data$date %>% is.Date()
third_party_raw_data$date[1] %>% is.Date()
third_party_raw_data %>% pull(date)
third_party_raw_data %>% vIEW()
third_party_raw_data %>% View
third_party_raw_data %>% %>% filter(location %in% "Beaufort, North Carolina")
third_party_raw_data %>% %>% filter(location =="Beaufort, North Carolina")
third_party_raw_data %>% filter(location =="Beaufort, North Carolina")
third_party_raw_data %>% filter(location %in% "Beaufort, North Carolina")
third_party_raw_data %>% filter(location %in% "Beaufort, North Carolina") %>% filter(date >= Sys.Date()-2)
third_party_raw_data %>% filter(location %in% "Beaufort, North Carolina") %>% filter(date >= Sys.Date()-2 & date < Sys.Date()+1)
runApp()
(Sys.Date() + 1) %>% as_datetime() %>% force_tz("America/New_York") %>% with_tz("UTC")
(Sys.Date() + 1) %>% as_datetime() %>% force_tz("America/New_York") %>% with_tz("UTC") %>%timestamp()
##------ 2021-05-11 04:00:00 ------##
runApp()
database_collected <- database %>% collect()
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
onStop(function() {
poolClose(con)
})
database <- con %>%
tbl("sensor_data_processed")
database_collected <- database %>% collect()
database %>% pull(date)
database %>% pull(date) %>% is.na()
database %>% pull(date) %>% is.na() %>% sum()
runApp()
datetime_to_timestamp(database_collected$date[-1])
datetime_to_timestamp(database_collected$date[1])
datetime_to_timestamp(database_collected$date[5])
runApp()
switch,
case = action
)
?switch()
get_thirdparty_wl <- function(location, type, min_date, max_date) {
if(location == "Beaufort, North Carolina"){
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"begin_date" = min_date,
"end_date" = max_date,
"product" = ifelse(type == "obs","water_level","predictions"),
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(wl)[1:2] <- c("date", "level_ft_navd88")
wl <- wl %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(level_ft_navd88),
entity = ifelse(type == "obs", "NOAA Observed","NOAA Predictions"),
notes = "observation"
)
return(wl)
}
}
runApp()
get_thirdparty_wl(location = "Beaufort, North Carolina", type= "obs",min_date = "20210403",max_date="20210415")
Sys.Date()
Sys.Date() %>% str_remove("-")
Sys.Date() %>% str_remove_all("-")
runApp()
get_thirdparty_wl(location = "Beaufort, North Carolina",type = "obs",min_date = Sys.Date() %>% str_remove_all("-"), min_date = Sys.Date()+1 %>% str_remove_all("-"))
get_thirdparty_wl(location = "Beaufort, North Carolina",type = "obs",min_date = Sys.Date() %>% str_remove_all("-"), max_date = Sys.Date()+1 %>% str_remove_all("-"))
Sys.Date() %>% str_remove_all("-")
Sys.Date()+1 %>% str_remove_all("-")
(Sys.Date()+1) %>% str_remove_all("-")
min_date <- Sys.Date()+1 %>% str_remove_all("-")
min_date <- (Sys.Date()+1) %>% str_remove_all("-")
max_date <- (Sys.Date()) %>% str_remove_all("-")
max_date <- (Sys.Date()+1) %>% str_remove_all("-")
min_date <- (Sys.Date()) %>% str_remove_all("-")
type = "obs"
location = "Beaufort, North Carolina"
get(third_party_wl)
get_thirdparty_wl()
get_thirdparty_wl(location=location,type=type,min_date=min_date,max_date=max_date)
get_thirdparty_wl(location=location,type="pred",min_date=min_date,max_date=max_date)
ifelse(type == "obs","water_level","predictions")
type = "predictions"
ifelse(type == "obs","water_level","predictions")
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"begin_date" = min_date,
"end_date" = max_date,
"product" = ifelse(type == "obs","water_level","predictions"),
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
request
request$content
wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
wl
min_date
max_date
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"begin_date" = min_date,
"end_date" = max_date,
"product" = ifelse(type == "obs","water_level","predictions"),
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
wl
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"begin_date" = min_date,
"end_date" = max_date,
"product" = ifelse(type == "obs","water_level","predictions"),
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(wl)[1:2] <- c("date", "level_ft_navd88")
if(nrow(wl) == 0){
stop("No predictions available")
}
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"begin_date" = min_date,
"end_date" = max_date,
"product" = ifelse(type == "obs","water_level","predictions"),
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"interval"="h",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(wl)[1:2] <- c("date", "level_ft_navd88")
if(nrow(wl) == 0){
stop("No predictions available")
}
get_thirdparty_wl <- function(location, type, min_date, max_date) {
if(location == "Beaufort, North Carolina"){
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"begin_date" = min_date,
"end_date" = max_date,
"product" = ifelse(type == "obs","water_level","predictions"),
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(wl)[1:2] <- c("date", "level_ft_navd88")
if(nrow(wl) == 0){
stop("No predictions available")
}
wl <- wl %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(level_ft_navd88),
entity = ifelse(type == "obs", "NOAA Observed","NOAA Predictions"),
notes = ifelse(type == "obs", "observation","prediction")
)
return(wl)
}
}
runApp()
