tbl("camera_locations") %>%
collect()
con %>%
tbl("photo_info") %>%
filter(DateTimeOriginalUTC == max(DateTimeOriginalUTC, na.rm=T)) %>%
collect()
con %>%
tbl("camera_locations") %>%
collect() %>%
left_join(con %>%
tbl("photo_info") %>%
filter(DateTimeOriginalUTC == max(DateTimeOriginalUTC, na.rm=T)) %>%
collect(), by = c("camera_ID")) %>%
mutate(date_lst = lubridate::with_tz(DateTimeOriginalUTC , tzone = "America/New_York"))
runApp()
con %>%
tbl("camera_locations") %>%
collect() %>%
left_join(con %>%
tbl("photo_info") %>%
filter(DateTimeOriginalUTC == max(DateTimeOriginalUTC, na.rm=T)) %>%
collect(), by = c("camera_ID")) %>%
mutate(date_lst = lubridate::with_tz(DateTimeOriginalUTC , tzone = "America/New_York")) %>%
sf::st_as_sf(coords = c("lng", "lat"), crs = 4269) %>%
mutate(
html_popups = paste0(
'<div>',
'<h3 align="center"><strong>Site ',camera_ID,'</h3></strong>',
'<h4 align="center">Last picture:</h4>',
'<h4 align="center">',paste0(format(date_lst, "%I:%M %p", usetz = T)," - ",format(date_lst, "%b %d, %Y")),'</h4>',
'<p align="center">Click to view this camera</p>'
)
)
runApp()
runApp()
as.list(sensor_locations$html_popups)
sensor_locations$html_popups
sensor_locations
runApp()
reactive_selection
?updateSelectInput
runApp()
?updateRadioButtons()
runApp()
?popupOptions
runApp()
runApp()
runApp()
?addPopups
?popupOptions
runApp()
as.list(sensor_location_selected$html_popups)
runApp()
as.list(camera_locations$html_popups)
as.list(sensor_locations$html_popups)
library(stringr)
str_remove("sensor_locations$html_popups","<p align=\"center\">Click to view data at this site</p>")
str_remove(sensor_locations$html_popups,"<p align=\"center\">Click to view data at this site</p>")
sensor_location_selected_label <-  as.list(str_remove(sensor_locations$html_popups,"<p align=\"center\">Click to view data at this site</p>"))
sensor_location_selected_label
camera_location_selected$html_popups
camera_locations
runApp()
runApp()
shiny::runApp()
box(status="success")
box(status="success",solidHeader = T)
runApp()
?tabBox
runApp()
runApp()
runApp()
?elseif
?else_if
?elif
runApp()
runApp()
runApp()
as.Date(datetime_to_timestamp(mdy(01022021)))
datetime_to_timestamp(mdy(01022021))
datetime_to_timestamp(mdy_hms(01022021000000))
datetime_to_timestamp(mdy_hms(01022021000000)) %>% as_datetime()
datetime_to_timestamp(mdy_hms(01022021000000)) %>% as_date()
runApp()
runApp()
runApp()
?shinyalert
runApp()
beaufort_noaa_wl <- beaufort_wl()
beaufort_noaa_wl
# Load NOAA Beaufort water level data
beaufort_wl <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"range" = "336",
"product" = "water_level",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(latest_noaa_wl)[1:2] <- c("date", "level_ft_navd88")
latest_noaa_wl <- latest_noaa_wl %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
pressure_mb = as.numeric(level_ft_navd88),
notes = "q"
)
return(latest_noaa_wl)
}
beaufort_noaa_wl <- beaufort_wl()
beaufort_noaa_wl
beaufort_noaa_wl %>% View
beaufort_noaa_wl
runApp()
beaufort_wl()
# Beaufort NOAA wl functions
beaufort_wl <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"range" = "336",
"product" = "water_level",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(latest_noaa_wl)[1:2] <- c("date", "level_ft_navd88")
latest_noaa_wl <- latest_noaa_wl %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(level_ft_navd88),
entity = "NOAA Observed",
notes = "q"
)
return(latest_noaa_wl)
}
beaufort_wl()
beaufort_wl() %>% View
# Load NOAA Beaufort water level data
third_party_data <- beaufort_wl()
third_party_data
runApp()
runApp()
runApp()
24*3
72+336
beaufort_wl_predictions <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"end_date" = Sys.Date() + 3,
"range" = "408",
"product" = "predictions",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(latest_noaa_wl)[1:2] <- c("date", "level_ft_navd88")
latest_noaa_wl <- latest_noaa_wl %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(level_ft_navd88),
entity = "NOAA Observed",
notes = "q"
)
return(latest_noaa_wl)
}
request
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"end_date" = Sys.Date() + 3,
"range" = "408",
"product" = "predictions",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
Sys.Date() + 3
format(Sys.Date() + 3,"%Y%m%d")
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"end_date" = format(Sys.Date() + 3,"%Y%m%d"),
"range" = "408",
"product" = "predictions",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
request
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"end_date" = format(Sys.Date() + 3,"%Y%m%d"),
"range" = "408",
"product" = "predictions",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
request
jsonlite::fromJSON(rawToChar(request$content)
)
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
jsonlite::fromJSON(rawToChar(request$content))$data
jsonlite::fromJSON(rawToChar(request$content))
latest_noaa_wl_predictions <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$predictions)
latest_noaa_wl_predictions
colnames(latest_noaa_wl)[1:2] <- c("date", "predictions_ft_navd88")
colnames(latest_noaa_wl_predictions)[1:2] <- c("date", "predictions_ft_navd88")
latest_noaa_wl_predictions
beaufort_wl_predictions <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"end_date" = format(Sys.Date() + 3,"%Y%m%d"),
"range" = "408",
"product" = "predictions",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl_predictions <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$predictions)
colnames(latest_noaa_wl_predictions)[1:2] <- c("date", "predictions_ft_navd88")
latest_noaa_wl_predictions <- latest_noaa_wl_predictions %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(predictions_ft_navd88),
entity = "NOAA Predicted",
notes = "prediction"
)
return(latest_noaa_wl_predictions)
}
beaufort_wl_predictions
beaufort_wl_predictions()
third_party_raw_data
# Load NOAA Beaufort water level data
third_party_raw_data <- beaufort_wl()
third_party_raw_data
beaufort_wl_predictions()
# Load NOAA Beaufort water level data
third_party_raw_data <- beaufort_wl() %>%
rbind(beaufort_wl_predictions())
third_party_raw_data
# Beaufort NOAA wl functions
beaufort_wl <- function() {
request <-
httr::GET(
url = "https://api.tidesandcurrents.noaa.gov/api/prod/datagetter/",
query = list(
"station" = "8656483",
"range" = "336",
"product" = "water_level",
"units" = "english",
"datum" = "NAVD",
"time_zone" = "gmt",
"format" = "json",
"application" = "UNC_Institute_for_the_Environment, https://github.com/acgold"
)
)
latest_noaa_wl <-
tibble::as_tibble(jsonlite::fromJSON(rawToChar(request$content))$data)
colnames(latest_noaa_wl)[1:2] <- c("date", "level_ft_navd88")
latest_noaa_wl <- latest_noaa_wl %>%
transmute(
location = "Beaufort, North Carolina",
date = ymd_hm(date),
level = as.numeric(level_ft_navd88),
entity = "NOAA Observed",
notes = "observations"
)
return(latest_noaa_wl)
}
# Load NOAA Beaufort water level data
third_party_raw_data <- beaufort_wl() %>%
rbind(beaufort_wl_predictions())
runApp()
third_party_data %>% filter(notes == "observed")
third_party_data %>% view()
third_party_data %>% View()
# Load NOAA Beaufort water level data
third_party_raw_data <- beaufort_wl() %>%
rbind(beaufort_wl_predictions())
third_party_raw_data
third_party_raw_data %>% View
plot_3rd_party_data <- third_party_raw_data
plot_3rd_party_data %>%
filter(notes == "observations")
runApp()
runApp()
runApp()
runApp()
runApp()
JS
runApp()
runApp()
runApp()
sensor_locations %>% filter(sensor_ID == input$data_sensor) %>% pull(date)
con %>%
tbl("sensor_locations")
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
database <- con %>%
tbl("sensor_data_processed")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
getNamespace()
(.packages())
shiny::runApp()
runApp()
# Packages to load
library(dplyr)
library(dbplyr)
library(lubridate)
library(shiny)
library(shinydashboard)
library(colourvalues)
library(waiter)
library(sf)
library(leaflet)
library(DT)
library(htmltools)
library(RColorBrewer)
library(highcharter)
library(magick)
library(xts)
library(RPostgres)
library(DBI)
library(pool)
library(shinyalert)
library(stringr)
library(shinydisconnect)
library(tippy)
library(httr)
# Source env variables if working on desktop
source("C:/Users/Adam Gold/Desktop/postgres_keys.R")
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
database <- con %>%
tbl("sensor_data_processed")
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
database <- con %>%
tbl("sensor_data_processed")
raw_data <- con %>% tbl("sensor_data")
raw_data_since_4_21 <- raw_data %>% filter(date > mdy(04212021)) %>% collect()
raw_data_since_4_21 <- raw_data %>% filter(date > !!mdy(04212021)) %>% collect()
processed_data_since_4_21 <- database %>% filter(date > !!mdy(04212021)) %>% collect()
raw_data_since_4_21
raw_data_since_4_21 %>% View
raw_data_since_4_21 %>% mutate(date = date - hours(1)) %>% View
raw_data_since_4_21_updated <- raw_data_since_4_21 %>% mutate(date = date - hours(1))
raw_data_since_4_21_updated %>% View
raw_data_since_4_21 %>% View
processed_data_since_4_21_updated <- processed_data_since_4_21 %>% mutate(date = date - hours(1))
processed_data_since_4_21 %>% View
processed_data_since_4_21_updated %>% View
dbx::dbxUpdate(conn = con,
table="sensor_data",
records = raw_data_since_4_21_updated,
where_cols = c("place", "sensor_ID", "date")
)
dbx::dbxUpdate(conn = con,
table="sensor_data",
records = raw_data_since_4_21_updated,
where_cols = c("place", "sensor_ID", "date")
)
dbx::dbxUpdate(conn = con,
table="sensor_data_processed",
records = processed_data_since_4_21_updated,
where_cols = c("place", "sensor_ID", "date")
)
raw_data %>% filter(date > !!mdy(04212021))
raw_data_since_4_21
raw_data_since_4_21_updated
con
# Connect to database
con <- dbPool(
drv =RPostgres::Postgres(),
dbname = Sys.getenv("POSTGRESQL_DATABASE"),
host = Sys.getenv("POSTGRESQL_HOST"),
port = Sys.getenv("POSTGRESQL_PORT"),
password = Sys.getenv("POSTGRESQL_PASSWORD"),
user = Sys.getenv("POSTGRESQL_USER")
)
con
#------------------------
raw_data_collected <- raw_data %>%
collect()
raw_data_collected
processed_data_collected <- con %>%
tbl("sensor_data_procesed") %>%
collect()
processed_data_collected <- con %>%
tbl("sensor_data_processed") %>%
collect()
raw_data_collected_updated <- raw_data_collected %>%
mutate(date = ifelse(date > mdy(04202021), date - hours(1), date))
processed_data_collected_updated <- processed_data_collected %>%
mutate(date = ifelse(date > mdy(04202021), date - hours(1), date))
processed_data_collected
ggplot()+geom_line(data = processed_data_collected, aes(x=date,y=sensor_water_level),color="blue")+geom_line(data = processed_data_collected_updated, aes(x=date,y=sensor_water_level),color="red")
library(ggplot2)
ggplot()+geom_line(data = processed_data_collected, aes(x=date,y=sensor_water_level),color="blue")+geom_line(data = processed_data_collected_updated, aes(x=date,y=sensor_water_level),color="red")
processed_data_collected %>% ggplot()+geom_point(aes(x=date,y=sensor_water_level))
ggplot()+geom_point(data = processed_data_collected, aes(x=date,y=sensor_water_level),color="blue")+geom_point(data = processed_data_collected_updated,aes(x=date,y=sensor_water_level),color="red")
processed_data_collected_updated
hours(1)
processed_data_collected$date[1]
processed_data_collected$date[1]-hours(1)
raw_data_collected_updated <- raw_data_collected %>%
mutate(date = if_else(date > mdy(04202021), date - hours(1), date))
processed_data_collected_updated <- processed_data_collected %>%
mutate(date = if_else(date > mdy(04202021), date - hours(1), date))
ggplot()+geom_line(data = processed_data_collected, aes(x=date,y=sensor_water_level),color="blue")+geom_line(data = processed_data_collected_updated, aes(x=date,y=sensor_water_level),color="red")
plotly::ggplotly(ggplot()+geom_line(data = processed_data_collected, aes(x=date,y=sensor_water_level),color="blue")+geom_line(data = processed_data_collected_updated, aes(x=date,y=sensor_water_level),color="red"))
plotly::ggplotly(ggplot()+geom_line(data = raw_data_collected, aes(x=date,y=sensor_water_level),color="blue")+geom_line(data = raw_data_collected_updated, aes(x=date,y=sensor_water_level),color="red"))
plotly::ggplotly(ggplot()+geom_line(data = raw_data_collected, aes(x=date,y=pressure),color="blue")+geom_line(data = raw_data_collected_updated, aes(x=date,y=pressure),color="red"))
raw_data_collected_updated
DBI::dbRemoveTable(conn=con, name="sensor_data")
DBI::dbCreateTable(conn = con,
table="sensor_data",
fields = raw_data_collected_updated)
DBI::dbCreateTable(conn = con,
name="sensor_data",
fields = raw_data_collected_updated)
DBI::dbAppendTable(conn = con,
name="sensor_data",
value = raw_data_collected_updated
)
processed_data_collected_updated
DBI::dbRemoveTable(conn=con, name="sensor_data_processed")
DBI::dbCreateTable(conn = con,
name="sensor_data_processed",
fields = processed_data_collected_updated)
DBI::dbAppendTable(conn = con,
name="sensor_data_processed",
value = processed_data_collected_updated
)
